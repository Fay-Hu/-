(function(exports, $) {
	var
		DATA_KEY = 'data.svgzoom',
		NS_SVG = 'http://www.w3.org/2000/svg'

	/**
	 * SvgZoom 
	 * @param {Object} ele
	 * @param {Object} opts
	 */
	function SvgZoom(ele, opts) {

		this.$element = $(ele)
		this.element = this.$element[0]

		if(!this.element instanceof SVGElement)
			throw new Error('SvgZoom element must be svg')

		if(this.$element.data(DATA_KEY)) return

		this.$element.data(DATA_KEY, this)
		this.options = $.extend({}, SvgZoom.Defaults, opts)

		this._init()
	}

	SvgZoom.Defaults = {
		//mouseWheel enable
		mouseWheel: true,
		zoomSpeed: 0.065,
		maxZoom: Number.POSITIVE_INFINITY,
		minZoom: 0.5,
		initZoom: 1,
		viewClass: 'svgzoom-view'
	}

	SvgZoom.prototype = {
		_init: function() {
			this.isDrag = false
			this.dragStartX = 0
			this.dragStartY = 0
			this.state = {
				x: 0,
				y: 0,
				zoom: this.options.initZoom
			}

			//add view wraper
			var
				$content = this.$element.children()

			this.$view = $(document.createElementNS(NS_SVG, 'g')).attr('class', this.options.viewClass)
			this.view = this.$view.get(0)

			this.$element.append(this.$view.append($content))
			this.updateZoom()

			this._bind()
		},

		_bind: function() {
			this.$element
				.on('mousedown', $.proxy(this._onMouseDown, this))
				.on('mouseup', $.proxy(this._onMouseUp, this))
				.on('mousemove', $.proxy(this._onMouseMove, this))
				.on('mousewheel DOMMouseScroll wheel', $.proxy(this._onMouseWheel, this))

		},

		_onMouseDown: function(e) {
			this.isDrag = true;
			this.dragStartX = e.clientX
			this.dragStartY = e.clientY
		},

		_onMouseUp: function(e) {
			this.isDrag = false
		},

		_onMouseMove: function(e) {
			if(this.isDrag) {
				var
					diffX = e.clientX - this.dragStartX,
					diffY = e.clientY - this.dragStartY

				this.state.x += (diffX)
				this.state.y += (diffY)
				this.updateZoom()
			}
			this.dragStartX = e.clientX
			this.dragStartY = e.clientY
		},

		_onMouseWheel: function(e) {
			f(this.options.mouseWheel) {
				var opts = this.options

				this.state.zoom *= (1 + opts.zoomSpeed * e.originalEvent.wheelDelta / Math.abs(e.originalEvent.wheelDelta))

				if(this.state.zoom < opts.minZoom) this.state.zoom = opts.minZoom
				if(this.state.zoom > opts.maxZoom) this.state.zoom = opts.maxZoom

				this.updateZoom()
			}
		},

		updateZoom: function() {
			this.$view.attr('transform', 'translate(' + this.state.x + ',' + this.state.y + ') scale(' + this.state.zoom + ')')
		}
	}
	exports.SvgZoom = SvgZoom
})(window, jQuery)
